---
layout: layout
title: "Getting your hands on invisible controls using FindAll"
---
#Getting your hands on invisible controls using FindAll

You may have come across the situation when you needed to retrieve the selector of a hidden UIElement. ScreenScraper Studio enables you to select any UI control visible on the screen, however you can't get the selector of an invisible element, even if you know that at some point that element will become visible.

Let's say that we have a WinForms application and use ScreenScraper Studio to select the top-level window of that application. The selector generated by Studio should look like:
``` html
"<wnd app='winforms_32.exe' cls='WindowsForms10.Window.*' title='WinForms_x32' ctrlname='Form1' />"
```

In our example with the WinForms app there's a hidden button with the title-attribute "Submit". We checked that there's no other button with that title in our application.

As you might already know, a selector is actually an XML fragment specifying few attributes of the GUI element you are looking for and some of its parents. That's why, even if a control is invisible, we can still define a selector for it and instantiate a UIElement using that selector.

To get the selector of an invisible UI element you should know the subsystem type of the control you're looking for ( learn more about acceptable subsystem types here) and an attribute or a set of attributes of that element that uniquely identifies it, like an ID, title, name or any other attribute. If you can't uniquely identify the control you can still use this method, but be aware that there can be several UI elements with the attributes you provided and you should choose whether you keep one or all of them.

In our case, the attribute that uniquely identifies our button is the title-attribute. As mentioned above, we made sure that there's no other buttons with the "Submit" title in our application. To get the selector for 'Submit' button we initialized a UIElement that represents the top-level window, let's call this UIElement the parent element, and then searched for all its children that have the subsystem type "wnd",  class = "WindowsForms10.Button.*" and title = "Submit". You can find code samples for C++ and C# below.

C++ code
``` cpp
CString GetInvisibleControlSelector()
{
     CString windowId = "<wnd app='winforms_32.exe' cls='WindowsForms10.Window.*' title='WinForms_x32' ctrlname='Form1'/>";
     CComPtr parentElem;
     parentElem.CoCreateInstance(CLSID_UIElement);
     try
     {
           parentElem->InitializeFromSelector((_bstr_t)windowId, 0);
     }
     catch(_com_error e)
     {
           AfxMessageBox(_T("An error appeared while trying to initialize from selector"));
           return NULL;
     }

     //creating the filter for FindAll method
     CString child = "<wnd cls='WindowsForms10.Button.*' title='Submit'/>";
     SAFEARRAY* result = NULL;
     try
     {
           result = parentElem ->FindAll(1, (_bstr_t)child);
     }
     catch (_com_error e)
     {
           AfxMessageBox(_T("An error appeared while trying to get all the descendents of the parent element"));
           return NULL;
     }
     LONG collectionLength;
     HRESULT hr;
     hr = SafeArrayGetUBound(result, 1, &collectionLength);
     if(FAILED(hr))
     {
           return NULL;
     }
     //at this point, CollectionLength should be 0, because we know for a fact
     //that this control exists and it is unique
     if(collectionLength != 0)
     {
           return NULL;
     }
     //getting the UIElement that defines our control
     CComQIPtr spCtrl;
     CComVariant varNode;
     LONG i = 0;
     SafeArrayGetElement(result, &i, &varNode);
     spCtrl = varNode.pdispVal;
     SafeArrayDestroy(result);
     //the UIElement objects returned when using FindAll don't have their selectors   

     //defined, so when retrieving them you should use VARIANT_TRUE,
     // instead of VARIANT_FALSE,
 
      //even if this may take more time to execute
      return spCtrl->GetID(VARIANT_TRUE);
}
```

C# code
``` cs
static void GetInvisibleControlSelector ()
{
       string windowId = "<wnd app='winforms_32.exe' cls='WindowsForms10.Window.*' title='WinForms_x32' ctrlname='Form1'/>";
       UIElem uiElemParent = new UIElem();
       string id;
       try
       {
              uiElemParent.InitializeFromSelector(windowId, 0);
              id = uiElemParent.GetID(false);
       }
       catch
       {
              Console.WriteLine("An error appeared while trying to initialize from selector");
              return null;
       }
       //creating the filter for FindAll method
       string child = "<wnd cls='WindowsForms10.Button.*' title='Submit'/>";
       UIElemCollection ElemCollection;
       try
       {
              ElemCollection = uiElemParent.FindAll(1, child);
       }
       catch
       {
              Console.WriteLine("An error appeared while trying to get all the descendents of the parent element");
              uiElemParent.Cleanup();
              return null;
       }
       // at this point ElemCollection should have only one element, but you should check anyway
       int length = ElemCollection.length;
       if (length != 1)
       {
              uiElemParent.Cleanup();
              return null;
       }
       UIElem uiElemCtrl = ElemCollection.GetAt(0);
       Console.WriteLine(uiElemCtrl.GetID(true));
       uiElemParent.Cleanup();
       iElemCtrl.Cleanup();
}
```
